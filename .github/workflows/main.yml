name: Build TESTPLUGIN (Ultimate Edition)
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: üß© Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      
      - name: üì¶ Download Revit API DLLs
        shell: pwsh
        run: |
          gh release download v1.0.0 --repo SHarpreet89/MyRevitAddin --pattern RevitApis.zip --dir .
          Expand-Archive RevitApis.zip -DestinationPath revapi -Force
          Copy-Item (Get-ChildItem -Recurse revapi -Filter 'RevitAPI.dll' | Select -First 1).FullName RevitAPI.dll -Force
          Copy-Item (Get-ChildItem -Recurse revapi -Filter 'RevitAPIUI.dll' | Select -First 1).FullName RevitAPIUI.dll -Force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üèóÔ∏è Build TESTPLUGIN x64
        run: msbuild TESTPLUGIN.csproj /p:Configuration=Release /p:Platform=x64 /v:minimal
      
      - name: üî¨ FULL DIAGNOSTICS
        shell: pwsh
        run: |
          Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
          Write-Host "üîç CRITICAL DIAGNOSTICS FOR LINE 146 CRASH" -ForegroundColor Yellow
          Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
          
          $dll = Get-ChildItem -Recurse -Filter "TESTPLUGIN.dll" | Select-Object -First 1
          
          if (-not $dll) {
            Write-Host "‚ùå TESTPLUGIN.dll NOT FOUND!" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "`nüìÅ DLL: $($dll.FullName)" -ForegroundColor Green
          Write-Host "üìä Size: $([math]::Round($dll.Length/1KB, 2)) KB" -ForegroundColor Green
          
          Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
          Write-Host "1Ô∏è‚É£ CORFLAGS (PE32+ / ILONLY / 32BITREQ)" -ForegroundColor Cyan
          Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
          $corflagsOutput = & "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\corflags.exe" $dll.FullName 2>&1 | Out-String
          Write-Host $corflagsOutput
          
          $pe = "UNKNOWN"
          $ilonly = "UNKNOWN"
          $req32bit = "UNKNOWN"
          
          if ($corflagsOutput -match "PE\s*:\s*(\S+)") { $pe = $matches[1] }
          if ($corflagsOutput -match "ILONLY\s*:\s*(\d+)") { $ilonly = $matches[1] }
          if ($corflagsOutput -match "32BITREQ\s*:\s*(\d+)") { $req32bit = $matches[1] }
          
          if ($pe -eq "PE32+" -and $ilonly -eq "1" -and $req32bit -eq "0") {
            Write-Host "‚úÖ DLL correctly configured for Revit 2025 x64!" -ForegroundColor Green
          } else {
            Write-Host "‚ùå WRONG FLAGS! Expected: PE32+, ILONLY=1, 32BITREQ=0" -ForegroundColor Red
            Write-Host "   Got: $pe, ILONLY=$ilonly, 32BITREQ=$req32bit" -ForegroundColor Red
          }
          
          Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
          Write-Host "2Ô∏è‚É£ ASSEMBLY VERSION (CRITICAL FOR LINE 146!)" -ForegroundColor Cyan
          Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
          $ildasmPath = "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\ildasm.exe"
          $ildasmOutput = & $ildasmPath /text /nobar $dll.FullName 2>&1 | Out-String
          $lines = $ildasmOutput -split "`n"
          $inAssembly = $false
          $versionLine = $null

          for ($i = 0; $i -lt $lines.Length; $i++) {
            $line = $lines[$i].Trim()
            if ($line -match "^\.assembly\s+TESTPLUGIN") {
              $inAssembly = $true
            }
            if ($inAssembly -and $line -match "^\.ver\s+\d+:\d+:\d+:\d+") {
              $versionLine = $line
              break
            }
            if ($inAssembly -and $line -match "^\}") {
              $inAssembly = $false
            }
          }

          if ($versionLine) {
            Write-Host $versionLine
            if ($versionLine -match "1:0:0:0") {
              Write-Host "‚úÖ Assembly Version 1.0.0.0 - CORRECT!" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Assembly Version NOT 1.0.0.0 - LINE 146 WILL CRASH!" -ForegroundColor Red
            }
          } else {
            Write-Host "‚ùå No assembly version found!" -ForegroundColor Red
          }

          Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
          Write-Host "3Ô∏è‚É£ EXECUTE METHOD CHECK" -ForegroundColor Cyan
          Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
          $executeMethods = $lines | Where-Object { $_ -match "Execute\s*\(" } | Select-Object -First 3
          if ($executeMethods) {
            Write-Host "‚úÖ Found Execute method:" -ForegroundColor Green
            $executeMethods | ForEach-Object { Write-Host "   $_" }
          } else {
            Write-Host "‚ùå No Execute method found!" -ForegroundColor Red
          }

          Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
          Write-Host "4Ô∏è‚É£ REFERENCED ASSEMBLIES" -ForegroundColor Cyan
          Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
          $refs = $lines | Where-Object { $_ -match "\.assembly extern" } | Select-Object -First 8
          $refs | ForEach-Object { Write-Host $_.Trim() }

          Write-Host "`n" + "‚ïê"*60 -ForegroundColor Cyan
          Write-Host "‚úÖ DIAGNOSTICS COMPLETE" -ForegroundColor Green
          Write-Host "‚ïê"*60 -ForegroundColor Cyan
          Write-Host "`nüìã FINAL VERDICT FOR LINE 146:" -ForegroundColor Yellow
          Write-Host "   PE Type: $pe (must be PE32+)" -ForegroundColor White
          Write-Host "   ILONLY: $ilonly (must be 1)" -ForegroundColor White
          Write-Host "   32BITREQ: $req32bit (must be 0)" -ForegroundColor White
          Write-Host "`nüí° Check journal.txt after deployment for: Assembly Name TESTPLUGIN, Version 1.0.0.0" -ForegroundColor Cyan
          Write-Host "`n"
      
      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TESTPLUGIN-${{ github.sha }}
          path: |
            bin/x64/Release/TESTPLUGIN.dll
            bin/x64/Release/TESTPLUGIN.pdb
            TESTPLUGIN.addin
          retention-days: 90
      
      - name: üéØ Show Download Instructions
        shell: pwsh
        run: |
          Write-Host "`n" + "‚ïê"*60 -ForegroundColor Green
          Write-Host "‚úÖ BUILD SUCCESSFUL!" -ForegroundColor Green
          Write-Host "‚ïê"*60 -ForegroundColor Green
          Write-Host "`nüì¶ DOWNLOAD ARTIFACT:" -ForegroundColor Cyan
          Write-Host "   https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" -ForegroundColor Yellow
          Write-Host "`nüìÇ OR:" -ForegroundColor Cyan
          Write-Host "   1. Go to https://github.com/${{ github.repository }}/actions"
          Write-Host "   2. Click this workflow run"
          Write-Host "   3. Scroll to 'Artifacts' section"
          Write-Host "   4. Download TESTPLUGIN-${{ github.sha }}.zip"
          Write-Host "`nüìÅ DEPLOY TO:" -ForegroundColor Cyan
          Write-Host "   C:\ProgramData\Autodesk\Revit\Addins\2025\"
          Write-Host "   - TESTPLUGIN.dll"
          Write-Host "   - TESTPLUGIN.addin"
          Write-Host "`n"
