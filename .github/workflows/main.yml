name: Build Revit Addin (.NET 8 - Pure x64)
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Download Revit API DLLs
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          gh release download v1.0.0 --repo SHarpreet89/MyRevitAddin --pattern RevitApis.zip --dir .
          Expand-Archive RevitApis.zip -DestinationPath revapi -Force
          $api = Get-ChildItem -Recurse revapi -Filter 'RevitAPI.dll' | Select -First 1
          $apiUI = Get-ChildItem -Recurse revapi -Filter 'RevitAPIUI.dll' | Select -First 1
          Copy-Item $api.FullName RevitAPI.dll -Force
          Copy-Item $apiUI.FullName RevitAPIUI.dll -Force
          Write-Host "‚úÖ Revit API DLLs staged"

      - name: üèóÔ∏è MSBuild Pure x64
        shell: pwsh
        run: |
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" MyRevitAddin.csproj `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:TargetFramework=net8.0-windows `
            /p:PlatformTarget=x64 `
            /t:Restore,Build `
            /maxcpucount `
            /v:minimal

      - name: üîß Force 32BITREQ + Verify
        shell: pwsh
        run: |
          # Find the Release/x64 DLL
          $dll = Get-ChildItem -Recurse -Filter "MyRevitAddin.dll" | 
                 Where-Object { $_.FullName -match "Release" -and $_.FullName -match "x64" } | 
                 Select-Object -First 1
          
          if (-not $dll) {
            Write-Host "‚ùå All DLLs found:"
            Get-ChildItem -Recurse -Filter "*.dll" | ForEach-Object { Write-Host "$($_.DirectoryName)\$($_.Name)" }
            throw "‚ùå No Release/x64 MyRevitAddin.dll found!"
          }
          
          Write-Host "üéØ TARGET DLL: $($dll.FullName)"
          
          # 1. Check PE Header (must be x64)
          $bytes = [System.IO.File]::ReadAllBytes($dll.FullName)
          $peOffset = [BitConverter]::ToInt32($bytes, 0x3C)
          $machine = [BitConverter]::ToUInt16($bytes, $peOffset + 4)
          Write-Host "üîç PE Machine: 0x$($machine.ToString('X4'))"
          
          if ($machine -ne 0x8664) {
            throw "‚ùå NOT x64 PE Header! Got: 0x$($machine.ToString('X4'))"
          }
          
          # 2. Force 32BITREQ flag
          Write-Host "üîß Setting 32BITREQ flag..."
          & corflags $dll.FullName /32BITREQ+ /nologo
          
          # 3. Verify final state
          $corflags = & corflags $dll.FullName
          Write-Host "üîç FINAL CorFlags:"
          $corflags | ForEach-Object { Write-Host "   $_" }
          
          if ($corflags -match "32BITREQ\s+:\s+0x1" -and $corflags -match "PE\s+:\s+PE32\+") {
            Write-Host "üéâüéâüéâ REVIT 2025 READY: Pure x64 DLL ‚úÖ‚úÖ‚úÖ"
          } else {
            throw "‚ùå CorFlags verification failed!"
          }

      - name: üì§ Upload ALL build outputs
        uses: actions/upload-artifact@v4
        with:
          name: MyRevitAddin-pure-x64
          path: |
            bin/**
            publish/**
