Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
Write-Host "üîç CRITICAL DIAGNOSTICS FOR LINE 146 CRASH" -ForegroundColor Yellow
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan

$dll = Get-ChildItem -Recurse -Filter "TESTPLUGIN.dll" | Select-Object -First 1

if (-not $dll) {
  Write-Host "‚ùå TESTPLUGIN.dll NOT FOUND!" -ForegroundColor Red
  exit 1
}

Write-Host "`nüìÅ DLL: $($dll.FullName)" -ForegroundColor Green
Write-Host "üìä Size: $([math]::Round($dll.Length/1KB, 2)) KB" -ForegroundColor Green

# Find dumpbin
$dumpbinPaths = @(
  "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe",
  "C:\Program Files (x86)\Microsoft Visual Studio\*\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe"
)
$dumpbin = Get-ChildItem -Path $dumpbinPaths -ErrorAction SilentlyContinue | Select-Object -First 1

Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
Write-Host "1Ô∏è‚É£ CORFLAGS (PE32+ / ILONLY / 32BITREQ)" -ForegroundColor Cyan
Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
$corflagsOutput = & "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\corflags.exe" $dll.FullName 2>&1 | Out-String
Write-Host $corflagsOutput

$pe = "UNKNOWN"
$ilonly = "UNKNOWN"
$req32bit = "UNKNOWN"

if ($corflagsOutput -match "PE\s*:\s*(\S+)") { $pe = $matches[1] }
if ($corflagsOutput -match "ILONLY\s*:\s*(\d+)") { $ilonly = $matches[1] }
if ($corflagsOutput -match "32BITREQ\s*:\s*(\d+)") { $req32bit = $matches[1] }

if ($pe -eq "PE32+" -and $ilonly -eq "1" -and $req32bit -eq "0") {
  Write-Host "‚úÖ DLL correctly configured for Revit 2025 x64!" -ForegroundColor Green
} else {
  Write-Host "‚ùå WRONG FLAGS! Expected: PE32+, ILONLY=1, 32BITREQ=0" -ForegroundColor Red
  Write-Host "   Got: $pe, ILONLY=$ilonly, 32BITREQ=$req32bit" -ForegroundColor Red
}

Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
Write-Host "2Ô∏è‚É£ ASSEMBLY VERSION (CRITICAL FOR LINE 146!)" -ForegroundColor Cyan
Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
$ildasmPath = "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\ildasm.exe"
$ildasmOutput = & $ildasmPath /text /nobar $dll.FullName 2>&1 | Out-String
$lines = $ildasmOutput -split "`n"
$inAssembly = $false
$versionLine = $null

for ($i = 0; $i -lt $lines.Length; $i++) {
  $line = $lines[$i].Trim()
  if ($line -match "^\.assembly\s+TESTPLUGIN") {
    $inAssembly = $true
  }
  if ($inAssembly -and $line -match "^\.ver\s+\d+:\d+:\d+:\d+") {
    $versionLine = $line
    break
  }
  if ($inAssembly -and $line -match "^\}") {
    $inAssembly = $false
  }
}

if ($versionLine) {
  Write-Host $versionLine
  if ($versionLine -match "1:0:0:0") {
    Write-Host "‚úÖ Assembly Version 1.0.0.0 - CORRECT!" -ForegroundColor Green
  } else {
    Write-Host "‚ùå Assembly Version NOT 1.0.0.0 - LINE 146 WILL CRASH!" -ForegroundColor Red
  }
} else {
  Write-Host "‚ùå No assembly version found! (Check if assembly definition exists in IL)" -ForegroundColor Red
  Write-Host "‚ÑπÔ∏è Partial ILDASM output for debug:" -ForegroundColor Yellow
  Write-Host ($lines | Select-Object -First 50 | Out-String)
}

Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
Write-Host "3Ô∏è‚É£ EXECUTE METHOD CHECK" -ForegroundColor Cyan
Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
$executeMethods = $lines | Where-Object { $_ -match "Execute\s*\(" } | Select-Object -First 3
if ($executeMethods) {
  Write-Host "‚úÖ Found Execute method:" -ForegroundColor Green
  $executeMethods | ForEach-Object { Write-Host "   $_" }
} else {
  Write-Host "‚ùå No Execute method found!" -ForegroundColor Red
  Write-Host "‚ÑπÔ∏è Check for class definition:" -ForegroundColor Yellow
  $classLines = $lines | Where-Object { $_ -match "\.class.*HelloCommand" } | Select-Object -First 1
  if ($classLines) {
    Write-Host "   ‚úÖ Class found: $classLines"
  } else {
    Write-Host "   ‚ùå No HelloCommand class found! (Compilation may have skipped the code)"
  }
  Write-Host "‚ÑπÔ∏è Partial ILDASM output for debug:" -ForegroundColor Yellow
  Write-Host ($lines | Select-Object -First 50 | Out-String)
}

Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
Write-Host "4Ô∏è‚É£ REFERENCED ASSEMBLIES" -ForegroundColor Cyan
Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
$refs = $lines | Where-Object { $_ -match "\.assembly extern" } | Select-Object -First 8
$refs | ForEach-Object { Write-Host $_.Trim() }

if ($dumpbin) {
  Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
  Write-Host "5Ô∏è‚É£ MIXED MODE CHECK (C++ Dependencies)" -ForegroundColor Cyan
  Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
  $depsOutput = & $dumpbin.FullName /dependents $dll.FullName 2>&1 | Out-String
  
  if ($depsOutput -match "msvcr|msvcp|vcruntime") {
    Write-Host "‚ùå MIXED MODE DETECTED - LINE 146 WILL CRASH!" -ForegroundColor Red
    Write-Host $depsOutput
  } else {
    Write-Host "‚úÖ Pure Managed Assembly - No Native Dependencies" -ForegroundColor Green
  }
}

Write-Host "`n" + "‚îÄ"*60 -ForegroundColor DarkGray
Write-Host "6Ô∏è‚É£ STRONG NAME CHECK" -ForegroundColor Cyan
Write-Host "‚îÄ"*60 -ForegroundColor DarkGray
$snOutput = & "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\sn.exe" -vf $dll.FullName 2>&1 | Out-String
if ($snOutput -match "does not represent a strongly named") {
  Write-Host "‚ÑπÔ∏è  Assembly is not strong-named (OK for testing)" -ForegroundColor Yellow
} else {
  Write-Host $snOutput
}

Write-Host "`n" + "‚ïê"*60 -ForegroundColor Cyan
Write-Host "‚úÖ DIAGNOSTICS COMPLETE" -ForegroundColor Green
Write-Host "‚ïê"*60 -ForegroundColor Cyan

Write-Host "`nüìã FINAL VERDICT FOR LINE 146:" -ForegroundColor Yellow
Write-Host "   PE Type: $pe (must be PE32+)" -ForegroundColor White
Write-Host "   ILONLY: $ilonly (must be 1)" -ForegroundColor White
Write-Host "   32BITREQ: $req32bit (must be 0)" -ForegroundColor White

Write-Host "`nüí° Check journal.txt after deployment for:" -ForegroundColor Cyan
Write-Host "   <A lvl=`"Info`">Assembly Name TESTPLUGIN, Version 1.0.0.0</A>" -ForegroundColor White
Write-Host "`n"
