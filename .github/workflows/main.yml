name: Build Revit Addin (.NET 8)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # üß† Verify that Windows Desktop Runtime 8.0 is available
      - name: üß† Verify .NET Windows Desktop runtime
        shell: pwsh
        run: |
          $runtimes = dotnet --list-runtimes
          Write-Host "Installed runtimes:`n$runtimes"
          $normalized = ($runtimes -replace '\s+', ' ')
          if ($normalized -match 'Microsoft\.WindowsDesktop\.App\s*8\.0') {
            Write-Host "‚úÖ WindowsDesktop.App 8.0 runtime detected."
          } else {
            throw "‚ùå Missing WindowsDesktop.App 8.0 runtime ‚Äî Revit add-ins need net8.0-windows SDK!"
          }

      # üì¶ Download and verify Revit API DLLs
      - name: üì¶ Download Revit API DLLs via gh
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $repo  = 'SHarpreet89/MyRevitAddin'
          $tag   = 'v1.0.0'
          $asset = 'RevitApis.zip'

          Write-Host "üì• Downloading $asset from $repo@$tag ..."
          gh release download $tag --repo $repo --pattern $asset --dir .
          if (-not (Test-Path $asset)) { throw "‚ùå $asset was not downloaded." }

          $extractDir = Join-Path $PWD 'revapi'
          if (Test-Path $extractDir) { Remove-Item $extractDir -Recurse -Force }
          New-Item -ItemType Directory -Path $extractDir | Out-Null
          Expand-Archive -Path $asset -DestinationPath $extractDir -Force

          $api   = Get-ChildItem -Recurse $extractDir -Filter 'RevitAPI.dll'    | Select-Object -First 1
          $apiUI = Get-ChildItem -Recurse $extractDir -Filter 'RevitAPIUI.dll' | Select-Object -First 1
          if (-not $api -or -not $apiUI) { throw "‚ùå Missing Revit API DLLs in ZIP." }

          function Get-Ver($p) { ([System.Diagnostics.FileVersionInfo]::GetVersionInfo($p)).FileVersion }
          $verApi   = Get-Ver $api.FullName
          $verApiUI = Get-Ver $apiUI.FullName
          Write-Host "üîé Versions ‚Üí RevitAPI: $verApi | RevitAPIUI: $verApiUI"

          if ($verApi -notmatch '^25\.')   { throw "‚ùå Wrong RevitAPI.dll version ($verApi)" }
          if ($verApiUI -notmatch '^25\.') { throw "‚ùå Wrong RevitAPIUI.dll version ($verApiUI)" }

          Copy-Item $api.FullName   -Destination (Join-Path $PWD 'RevitAPI.dll')   -Force
          Copy-Item $apiUI.FullName -Destination (Join-Path $PWD 'RevitAPIUI.dll') -Force
          Write-Host "‚úÖ Staged Revit API DLLs in repo root."

      # üèóÔ∏è Publish for 64-bit architecture (Amd64)
      - name: üèóÔ∏è Publish for Windows x64
        run: dotnet publish MyRevitAddin.csproj -c Release -r win-x64 --no-self-contained

      # üîç Inspect compiled DLL
      - name: üîç Inspect compiled DLL
        shell: pwsh
        run: |
          $dll = Get-ChildItem -Recurse -Filter "MyRevitAddin.dll" | Select-Object -First 1
          if (-not $dll) { throw "‚ùå MyRevitAddin.dll not found!" }
          Write-Host "Inspecting: $($dll.FullName)"
          $asm = [System.Reflection.AssemblyName]::GetAssemblyName($dll.FullName)
          Write-Host " - Name: $($asm.Name)"
          Write-Host " - Version: $($asm.Version)"
          Write-Host " - ProcessorArchitecture: $($asm.ProcessorArchitecture)"
          $size = (Get-Item $dll.FullName).Length
          Write-Host " - File size: $size bytes"
          if ($asm.ProcessorArchitecture -ne "Amd64") {
            throw "‚ùå Still not Amd64!  Revit requires 64-bit IL."
          } else {
            Write-Host "‚úÖ Confirmed Amd64 architecture ‚Äî ready for Revit 2025."
          }

      # üì§ Upload artifact
      - name: üì§ Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: MyRevitAddin
          path: bin/Release/net8.0-windows/win-x64/publish/
