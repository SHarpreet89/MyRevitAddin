name: üîç DIAGNOSE TESTPLUGIN IL Failure
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  diagnose:
    runs-on: windows-latest
    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup MSBuild + Tools
        uses: microsoft/setup-msbuild@v2

      - name: üì¶ Download Revit API DLLs
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          gh release download v1.0.0 --repo SHarpreet89/MyRevitAddin --pattern RevitApis.zip --dir .
          Expand-Archive RevitApis.zip -DestinationPath revapi -Force
          Copy-Item (Get-ChildItem -Recurse revapi -Filter 'RevitAPI.dll' | Select -First 1).FullName RevitAPI.dll -Force
          Copy-Item (Get-ChildItem -Recurse revapi -Filter 'RevitAPIUI.dll' | Select -First 1).FullName RevitAPIUI.dll -Force
          Write-Host "‚úÖ Revit API DLLs staged"

      - name: üèóÔ∏è Build + FULL IL ANALYSIS
        shell: pwsh
        run: |
          # Build with max verbosity
          Write-Host "üî® Building TESTPLUGIN.csproj..."
          msbuild TESTPLUGIN.csproj /p:Configuration=Release /p:Platform=x64 /maxcpucount /v:diagnostic > build.log 2>&1
          
          # Find DLL
          $dll = Get-ChildItem -Recurse -Filter "TESTPLUGIN.dll" | Select-Object -First 1
          if (-not $dll) {
            Get-ChildItem -Recurse -Filter "*.dll" | ForEach-Object { Write-Host "üìÅ ALL DLLs: $($_.FullName)" }
            throw "‚ùå TESTPLUGIN.dll not found!"
          }
          Write-Host "üéØ DLL: $($dll.FullName)"
          
          # 1. CorFlags
          Write-Host "`nüîç CORFLAGS:"
          & "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\corflags.exe" $dll.FullName
          
          # 2. PE Headers
          Write-Host "`nüîç PE HEADERS:"
          $bytes = [System.IO.File]::ReadAllBytes($dll.FullName)
          $peOffset = [BitConverter]::ToInt32($bytes, 0x3C)
          $machine = [BitConverter]::ToUInt16($bytes, $peOffset + 4)
          Write-Host "Machine: 0x$($machine.ToString('X4')) (x64=8664)"
          
          # 3. ILDASM (Decompile IL)
          Write-Host "`nüîç DECOMPILING IL..."
          ildasm $dll.FullName /text > il.txt
          Write-Host "`nüîç IL SAMPLE (first 50 lines):"
          Get-Content il.txt -TotalCount 50
          
          # 4. Dependency Analysis
          Write-Host "`nüîç ASSEMBLY REFERENCES:"
          try {
            $asm = [System.Reflection.AssemblyName]::GetAssemblyName($dll.FullName)
            $asm.GetReferencedAssemblies() | ForEach-Object { Write-Host "  -> $($_.FullName)" }
          } catch {
            Write-Host "‚ùå Cannot read references: $_"
          }
          
          # 5. TRY LOAD IN .NET 4.8
          Write-Host "`nüîç LOAD TEST (.NET 4.8):"
          try {
            Add-Type -Path $dll.FullName -ErrorAction Stop
            Write-Host "‚úÖ .NET 4.8 LOAD SUCCESS!"
          } catch {
            Write-Host "‚ùå .NET 4.8 LOAD FAILED: $_"
          }

      - name: üì§ Upload Diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: TESTPLUGIN-DIAGNOSTICS
          path: |
            **/*.log
            **/il.txt
            **/*.dll
            **/TESTPLUGIN.*
          retention-days: 30
